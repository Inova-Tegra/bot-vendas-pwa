{"version":3,"sources":["InstallButton.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["InstallButton","useState","supportsPWA","setSupportsPWA","promptInstall","setPromptInstall","pwaHandler","e","preventDefault","useEffect","window","addEventListener","removeEventListener","className","id","aria-label","title","onClick","evt","prompt","App","configWatsonChat","a","findWatsonChatBtn","chatBtn","initiateWatsonResponseFormatter","setTimeout","autoOpenChat","document","querySelector","Promise","r","targetNode","MutationObserver","mutationsList","observer","mutation","target","watsonResColl","querySelectorAll","watsonRes","length","longRes","innerHTML","split","map","content","join","replace","pdfViewerUrl","forEach","link","href","includes","observe","attributes","childList","subtree","matchMedia","matches","click","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.56b1d4f9.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n\r\nconst InstallButton = () => {\r\n  const [supportsPWA, setSupportsPWA] = useState(false);\r\n  const [promptInstall, setPromptInstall] = useState(null);\r\n\r\n  const pwaHandler = e => {\r\n    e.preventDefault();\r\n    setSupportsPWA(true);\r\n    setPromptInstall(e);\r\n  };\r\n  \r\n  useEffect(() => {\r\n    window.addEventListener(\"beforeinstallprompt\", pwaHandler);\r\n    return () => window.removeEventListener(\"transitionend\", pwaHandler);\r\n  }, []);\r\n\r\n  const onClick = evt => {\r\n    evt.preventDefault();\r\n    if (!promptInstall) {\r\n      return;\r\n    }\r\n    promptInstall.prompt();\r\n  };\r\n\r\n  if (!supportsPWA) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <button\r\n      className=\"install-btn\"\r\n      id=\"setup_button\"\r\n      aria-label=\"Install app\"\r\n      title=\"Install app\"\r\n      onClick={onClick}\r\n    >\r\n      INSTALAR\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default InstallButton;","import React, { useEffect } from \"react\";\r\nimport InstallButton from \"./InstallButton\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n\r\n  const configWatsonChat = async () => {\r\n    const chatBtn = await findWatsonChatBtn();\r\n    initiateWatsonResponseFormatter();\r\n    setTimeout(autoOpenChat(chatBtn), 500);\r\n  }\r\n\r\n  const findWatsonChatBtn = async () => {\r\n    const chatBtn = document.querySelector('#WACLauncher__Button');\r\n    if (chatBtn) {\r\n      return chatBtn;\r\n    } else {\r\n      await new Promise(r => setTimeout(r, 250));\r\n      return findWatsonChatBtn();\r\n    }\r\n  }\r\n  \r\n  // FORMATAR RESPOSTAS VINDAS DO WATSON DISCOVERY, PARA QUE TENHAM QUEBRA DE LINHA E SEJAMENTENDIDAS COMO CÓDIGO HTML E NÃO APENAS COMO UMA STRING\r\n  const initiateWatsonResponseFormatter = () => {\r\n    const targetNode = document.querySelector('#WACContainer');\r\n    const config = { attributes: true, childList: true, subtree: true };\r\n    \r\n    const formatResponse = function(mutationsList, observer) {\r\n        // Use traditional 'for loops' for IE 11\r\n        for(const mutation of mutationsList) {\r\n          if (mutation.target.id === 'WAC__messages') {\r\n            let watsonResColl = mutation.target.querySelectorAll('.WAC__searchResult--padding');\r\n            let watsonRes = watsonResColl[watsonResColl.length-1]\r\n            \r\n            if (watsonRes) {\r\n              const longRes = watsonRes.querySelector('.WAC__searchResponseBody');\r\n              if(longRes) watsonRes = longRes;\r\n\r\n              watsonRes.innerHTML = watsonRes.innerHTML.split('\\n').map(content=> `<p>${content}</p>`).join(' ')\r\n              .replace(/&lt;/g, '<').replace(/&gt;/g, '>')\r\n\r\n              // edit pdf urls so they can be seen on mobile without needing to download them\r\n              const pdfViewerUrl = 'https://docs.google.com/viewer?url='\r\n              const resLinks = watsonRes.querySelectorAll('a');\r\n              \r\n              resLinks.forEach(link => {\r\n                if(link.href.includes('.pdf') && !link.href.includes(pdfViewerUrl)) {\r\n                  link.href = pdfViewerUrl + link.href\r\n                };\r\n              })\r\n            }\r\n          }\r\n        }\r\n    };\r\n\r\n    const observer = new MutationObserver(formatResponse);\r\n    observer.observe(targetNode, config);\r\n  }\r\n\r\n  // if app has already been installed, automatically open chat, for better user ux (needs less click to start conversation)\r\n  const autoOpenChat = (chatBtn) =>{\r\n    if (window.matchMedia('(display-mode: standalone)').matches) {\r\n      chatBtn.click();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    configWatsonChat();\r\n  });\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <InstallButton />\r\n      <div className=\"App-content\">\r\n        <div>\r\n          <h1>Bot Tegra Conecta</h1>\r\n          <p>Tire suas dúvidas sobre o Home Boutique by Tegra.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}